1. 在state组件中暴露
  export default {
    latitude: 40.10038, // 纬度
    longitude: 116.36867, // 经度
    address: {}, // 地址相关信息对象
    categorys: [], // 食品分类数组
    shops: [] // 商家数组
  }

2. 在mutation-types组件中定义
  export const RECEIVE_ADDRESS = 'receive_address' // 接收地址
  export const RECEIVE_CATEGORYS = 'receive_categorys' // 接收食品分类数组
  export const RECEIVE_SHOPS = 'receive_shops' // 接收商家数组

3. 在mutations组件中
  引入
  import {
    RECEIVE_ADDRESS,
    RECEIVE_CATEGORYS,
    RECEIVE_SHOPS
  } from './mutation-types'

  定义
  export default {
    [RECEIVE_ADDRESS] (state, {address}) {
      state.address = address
    },
    [RECEIVE_CATEGORYS] (state, {categorys}) {
      state.categorys = categorys
    },
    [RECEIVE_SHOPS] (state, {shops}) {
      state.shops = shops
    }
  }

4. 在actions组件中
    引入
    import {
      RECEIVE_ADDRESS,
      RECEIVE_CATEGORYS,
      RECEIVE_SHOPS
    } from './mutation-types'

    import {reqAddress, reqFoodCategorys, reqShops} from '../api'

    定义
    export default {
      // 异步获取地址
      async getAddress ({commit, state}) {
        // 发送异步ajax请求
        const {longitude, latitude} = state
        const geohash = latitude + ',' + longitude
        const result = await reqAddress(geohash)
        // 根据结果提交一个mutation
        if (result.code === 0) {
          const address = result.data
          commit(RECEIVE_ADDRESS, {address})
        }
      },
      // 异步获取食品分类列表
      async getCategorys ({commit}) {
        // 发送异步ajax请求
        const result = await reqFoodCategorys()
        // 根据结果提交一个mutation
        if (result.code === 0) {
          const categorys = result.data
          commit(RECEIVE_CATEGORYS, {categorys})
        }
      },
      // 异步获取商家列表
      async getShops ({commit, state}) {
        // 发送异步ajax请求
        const {longitude, latitude} = state
        const result = await reqShops(longitude, latitude)
        // 根据结果提交一个mutation
        if (result.code === 0) {
          const shops = result.data
          commit(RECEIVE_SHOPS, {shops})
        }
      }
    }

5. 在src-main.js中
    引入
    import store from './store(vuex)'

    使用
    let vm = new Vue({
      el: '#app',
      render: h => h(App),
      router, // 使用上 vue-router
      store // 使用上 vuex
    })

6. 在src-App.vue中
    使用
    调用actions中的方法
     export default {

       mounted () {
         this.$store.dispatch('getAddress')
       },

       components: {
         FooterGuide
       }
     }

7. 运行前后台项目 打开浏览器的vue-vuex 对比与测试数据接口时的数据是否一致
